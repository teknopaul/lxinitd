#!/bin/bash

#
# lxc: linux Container library

# Authors:
# Daniel Lezcano <daniel.lezcano@free.fr>
# teknopaul <teknopaul@tp23.org>

# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.

# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.

# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

LXC_MAPPED_UID=
LXC_MAPPED_GID=

export PATH=$PATH:/usr/sbin:/usr/bin:/sbin:/bin

am_in_userns() {
    [ -e /proc/self/uid_map ] || { echo no; return; }
    [ "$(wc -l /proc/self/uid_map | awk '{ print $1 }')" -eq 1 ] || { echo yes; return; }
    line=$(awk '{ print $1 " " $2 " " $3 }' /proc/self/uid_map)
    [ "$line" = "0 0 4294967295" ] && { echo no; return; }
    echo yes
}

in_userns=0
[ $(am_in_userns) = "yes" ] && in_userns=1

die()
{
    echo $*
    exit 1
}

install_lxinitd()
{
    rootfs=$1
    name=$2
    res=0
    tree="\
$rootfs/selinux \
$rootfs/dev \
$rootfs/home \
$rootfs/root \
$rootfs/etc \
$rootfs/etc/security \
$rootfs/etc/default \
$rootfs/etc/pam.d \
$rootfs/bin \
$rootfs/usr/bin \
$rootfs/sbin \
$rootfs/usr/sbin \
$rootfs/proc \
$rootfs/sys \
$rootfs/mnt \
$rootfs/tmp \
$rootfs/var/log \
$rootfs/var/mail \
$rootfs/dev/pts \
$rootfs/dev/shm \
$rootfs/lib \
$rootfs/usr/lib \
$rootfs/lib64 \
$rootfs/usr/lib64"

    mkdir -p $tree  || return 1
    chmod 755 $tree || return 1

    pushd $rootfs/dev > /dev/null || return 1

    #
    # minimal devices
    #
    if [ $in_userns -eq 1 ]; then
        for dev in tty console tty0 tty1 ram0 null urandom; do
            echo "lxc.mount.entry = /dev/$dev dev/$dev    none bind,optional,create=file 0 0" >> $path/config
        done
    else
        mknod -m 666 tty c 5 0       || res=1
        mknod -m 666 console c 5 1   || res=1
        mknod -m 666 tty0 c 4 0      || res=1
        mknod -m 666 tty1 c 4 0      || res=1
        mknod -m 666 tty5 c 4 0      || res=1
        mknod -m 600 ram0 b 1 0      || res=1
        mknod -m 666 null c 1 3      || res=1
        mknod -m 666 zero c 1 5      || res=1
        mknod -m 666 urandom c 1 9   || res=1
    fi

    popd > /dev/null

    #
    # root user defined
    #
    (cd $rootfs && lxpasswd 0 root)

    echo "$name" > $rootfs/etc/hostname

    echo \
'#
# generated by lxc-lxinitd
#
127.0.0.1   localhost
#
' > $rootfs/etc/hosts

    return $res

}

configure_lxinitd()
{

rootfs=$1
cd $rootfs || die "can't cd to: $rootfs"

cp /bin/rosh       bin/
cp /bin/lxinitd    bin/
cp /bin/noopsh     bin/
cp /bin/lxmenu     bin/
cp /bin/su         bin/
cp /bin/login      bin/
cp /sbin/getty     sbin/

(
    cd $rootfs/sbin
    ln -s ../bin/lxinitd init
)
(
    cd $rootfs/bin
    ln -s rosh   true
    ln -s rosh   false
    ln -s rosh   nologin
    ln -s rosh   clear
    ln -s lxmenu sh
)

echo '#!/bin/lxinitd
#
# lxinitd boot script
#

respawn /sbin/getty -L tty1 115200 vt100

' > etc/rc.local

echo '#!/bin/lxmenu
#
# lxmenu.conf - nrpe syntax
#
#command[ps]=/bin/ps -efwww
command[version]=/bin/rosh -v

' >  etc/lxmenu.conf

touch var/log/service.log       \
      etc/security/limits.conf  \
      etc/security/pam_env.conf \
      etc/security/group.conf

echo '# /etc/shells: valid login shells
/bin/sh
/bin/bash
/bin/rbash
/bin/rosh
/bin/lxmenu
' > etc/shells

echo '
#######################################
####            lxinitd            ####
#######################################
' > etc/issue

echo '
MAIL_DIR         /var/mail
SU_NAME          su
DEFAULT_HOME     yes
ENCRYPT_METHOD   SHA512
' > etc/login.defs

cp /etc/pam.d/login \
   /etc/pam.d/sudo \
   /etc/pam.d/su \
   /etc/pam.d/common-auth \
   /etc/pam.d/common-account \
   /etc/pam.d/common-password \
   /etc/pam.d/common-session \
   /etc/pam.d/common-session-noninteractive \
   etc/pam.d/

cp /etc/default/locale  etc/default

}

copy_configuration()
{
    path=$1
    rootfs=$2
    name=$3

grep -q "^lxc.rootfs" $path/config 2>/dev/null || echo "lxc.rootfs = $rootfs" >> $path/config
echo "
lxc.haltsignal = SIGUSR1
lxc.rebootsignal = SIGTERM
lxc.utsname = $name
lxc.tty = 1
lxc.pts = 1
lxc.cap.drop = sys_module mac_admin mac_override sys_time

# When using LXC with apparmor, uncomment the next line to run unconfined:
#lxc.aa_profile = unconfined

lxc.mount.auto = cgroup:mixed proc:mixed sys:mixed
lxc.mount.entry = shm /dev/shm tmpfs defaults 0 0
" >> $path/config

    libdirs="\
        lib \
        usr/lib \
        lib64 \
        usr/lib64"

    for dir in $libdirs
    do
        if [ -d "/$dir" ] && [ -d "$rootfs/$dir" ]
        then
            echo "lxc.mount.entry = /$dir $dir none ro,bind 0 0" >> $path/config
        fi
    done
    echo "lxc.mount.entry = /sys/kernel/security sys/kernel/security none ro,bind,optional 0 0" >>$path/config

}

remap_userns()
{
    path=$1

    if [ -n "$LXC_MAPPED_UID" ] && [ "$LXC_MAPPED_UID" != "-1" ]; then
        chown $LXC_MAPPED_UID $path/config >/dev/null 2>&1
        chown -R root $path/rootfs >/dev/null 2>&1
    fi

    if [ -n "$LXC_MAPPED_GID" ] && [ "$LXC_MAPPED_GID" != "-1" ]; then
        chgrp $LXC_MAPPED_GID $path/config >/dev/null 2>&1
        chgrp -R root $path/rootfs >/dev/null 2>&1
    fi
}

usage()
{
    echo "$1 -h|--help -p|--path=<path>"
    return 0
}

options=$(getopt -o hp:n: -l help,rootfs:,path:,name:,mapped-uid:,mapped-gid: -- "$@")
if [ $? -ne 0 ]
then
    usage $(basename $0)
    exit 1
fi
eval set -- "$options"

while true
do
    case "$1" in
        -h|--help)      usage $0 && exit 0;;
        -p|--path)      path=$2; shift 2;;
        --rootfs)       rootfs=$2; shift 2;;
        -n|--name)      name=$2; shift 2;;
        --mapped-uid)   LXC_MAPPED_UID=$2; shift 2;;
        --mapped-gid)   LXC_MAPPED_GID=$2; shift 2;;
        --)             shift 1; break ;;
        *)              break ;;
    esac
done

[ $(id -u) == 0 ] || die "This script should be run as 'root'"

[ -n "$path" ] || die "'path' parameter is required"

#
# detect rootfs
#
config="$path/config"
if [ -z "$rootfs" ]; then
    if grep -q '^lxc.rootfs' $config 2>/dev/null ; then
        rootfs=$(awk -F= '/^lxc.rootfs =/{ print $2 }' $config)
    else
        rootfs=$path/rootfs
    fi
fi

which lxpasswd > /dev/null || die "install lxinitd .deb package"


install_lxinitd $rootfs $name          || die "failed to install lxinitd's rootfs"

configure_lxinitd $rootfs              || die "failed to configure lxinitd template"

copy_configuration $path $rootfs $name || die "failed to write configuration file"

remap_userns $path                     || die "failed to remap files to user"
